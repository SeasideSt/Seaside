"
Setup global settings for AJAX requests.
"
Class {
	#name : #JQAjaxSetup,
	#superclass : #JQPlugin,
	#category : 'JQuery-Core-Objects'
}

{ #category : #options }
JQAjaxSetup >> async: aBoolean [
	"By default, all requests are sent asynchronous (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active."
	
	self optionAt: 'async' put: aBoolean
]

{ #category : #options }
JQAjaxSetup >> cache: aBoolean [
	"If set to false it will force the pages that you request to not be cached by the browser."
	
	self optionAt: 'cache' put: aBoolean
]

{ #category : #options }
JQAjaxSetup >> contentType: aString [
	"When sending data to the server, use this content-type. Default is 'application/x-www-form-urlencoded', which is fine for most cases. If you explicitly pass in a content-type to $.ajax() then it'll always be sent to the server (even if no data is sent)."
	
	self optionAt: 'contentType' put: aString
]

{ #category : #options }
JQAjaxSetup >> context: anObject [
	"This object will be made the context of all Ajax-related callbacks. For example specifying a DOM element as the context will make that the context for the complete callback of a request, like so:"
	
	self optionAt: 'context' put: anObject
]

{ #category : #options }
JQAjaxSetup >> data: anObject [
	"Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key i.e. {foo:['bar1', 'bar2']} becomes '&foo=bar1&foo=bar2'."
	
	self optionAt: 'data' put: anObject
]

{ #category : #options }
JQAjaxSetup >> dataFilter: anObject [
	"A function to be used to handle the raw responsed data of XMLHttpRequest.This is a pre-filtering function to sanitize the response.You should return the sanitized data.The function gets passed two arguments: The raw data returned from the server, and the 'dataType' parameter."
	
	self optionAt: 'dataFilter' put: (anObject asFunction return: true)
]

{ #category : #options }
JQAjaxSetup >> dataType: aString [
	"The type of data that you're expecting back from the server. If none is specified, jQuery will intelligently pass either responseXML or responseText to your success callback, based on the MIME type of the response. The available types (and the result passed as the first argument to your success callback) are:
	-	xml: Returns a XML document that can be processed via jQuery.
	-	html: Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
	-	script: Evaluates the response as JavaScript and returns it as plain text. Disables caching unless option 'cache' is used. Note: This will turn POSTs into GETs for remote-domain requests.
	-	json: Evaluates the response as JSON and returns a JavaScript Object.
	-	jsonp: Loads in a JSON block using JSONP. Will add an extra '?callback=?' to the end of your URL to specify the callback. (Added in jQuery 1.2)
	-	text: A plain text string."
	
	self optionAt: 'dataType' put: aString
]

{ #category : #options }
JQAjaxSetup >> global: aBoolean [
	"Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events."
	
	self optionAt: 'global' put: aBoolean
]

{ #category : #options }
JQAjaxSetup >> ifModified: aBoolean [
	"Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data."
	
	self optionAt: 'ifModified' put: aBoolean
]

{ #category : #options }
JQAjaxSetup >> jsonp: aString [
	"Override the callback function name in a jsonp request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url for a GET or the data for a POST. So {jsonp:'onJsonPLoad'} would result in 'onJsonPLoad=?' passed to the server."
	
	self optionAt: 'jsonp' put: aString
]

{ #category : #options }
JQAjaxSetup >> jsonpCallback: anObject [
	"Specify the callback function name for a jsonp request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests."
	
	self optionAt: 'jsonpCallback' put: anObject asFunction
]

{ #category : #accessing }
JQAjaxSetup >> method [
	^ 'ajaxSetup'
]

{ #category : #events }
JQAjaxSetup >> onBeforeSend: anObject [
	"A pre-callback to modify the XMLHttpRequest object before it is sent. Use this to set custom headers etc. The XMLHttpRequest is passed as the only argument."
	
	self optionAt: 'beforeSend' put: anObject asFunction
]

{ #category : #events }
JQAjaxSetup >> onComplete: anObject [
	"A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The XMLHttpRequest object and a string describing the type of success of the request."
	
	self optionAt: 'complete' put: anObject asFunction
]

{ #category : #events }
JQAjaxSetup >> onError: anObject [
	"A function to be called if the request fails. The function is passed three arguments: The XMLHttpRequest object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are 'timeout', 'error', 'notmodified' and 'parsererror'."
	
	self optionAt: 'error' put: anObject asFunction
]

{ #category : #events }
JQAjaxSetup >> onSuccess: anObject [
	"A function to be called if the request succeeds. The function gets passed two arguments: The data returned from the server, formatted according to the 'dataType' parameter, and a string describing the status."
	
	self optionAt: 'success' put: anObject asFunction
]

{ #category : #events }
JQAjaxSetup >> onXhr: anObject [
	"Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory."
	
	self optionAt: 'xhr' put: anObject asFunction
]

{ #category : #options }
JQAjaxSetup >> password: aString [
	"A password to be used in response to an HTTP access authentication request."
	
	self optionAt: 'password' put: aString
]

{ #category : #options }
JQAjaxSetup >> processData: aBoolean [
	"By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type 'application/x-www-form-urlencoded'. If you want to send a DOMDocument, or other non-processed data, set this option to false."
	
	self optionAt: 'processData' put: aBoolean
]

{ #category : #options }
JQAjaxSetup >> scriptCharset: aString [
	"Only for requests with 'jsonp' or 'script' dataType and 'GET' type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content."
	
	self optionAt: 'scriptCharset' put: aString
]

{ #category : #options }
JQAjaxSetup >> timeout: anInteger [
	"Set a local timeout (in milliseconds) for the request. This will override the global timeout, if one is set via $.ajaxSetup. For example, you could use this property to give a single request a longer timeout than all other requests that you've set to time out in one second. See $.ajaxSetup() for global timeouts."
	
	self optionAt: 'timeout' put: anInteger
]

{ #category : #options }
JQAjaxSetup >> traditional: aBoolean [
	"Set this to true if you wish to use the traditional style of param serialization."
	
	self optionAt: 'traditional' put: aBoolean
]

{ #category : #options }
JQAjaxSetup >> type: aString [
	"The type of request to make ('POST' or 'GET'), default is 'GET'. Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers."
	
	self optionAt: 'type' put: aString asUppercase
]

{ #category : #options }
JQAjaxSetup >> url: aUrl [
	"A string containing the URL to which the request is sent."
	
	self optionAt: 'url' put: aUrl
]

{ #category : #options }
JQAjaxSetup >> username: aString [
	"A username to be used in response to an HTTP access authentication request."
	
	self optionAt: 'username' put: aString
]
