"
This Document can be used in place of a WAHtmlDocument and will display a pretty version of the HTML source that would have been generated by the WAHtmlDocument.

The technique here is that:
 - anything we are asked to output raw (i.e. #nextPut: and #nextPutAll:) we encode with entities
 - anything we are asked to entity encode (i.e. via #xmlEncoder) we double-encode, by wrapping the two WAXmlEncoders around each other
 - anything we want to output ourselves (i.e. prettiness) we do using a WAHtmlCanvas that we create ourselves
"
Class {
	#name : 'WAPrettyPrintedDocument',
	#superclass : 'WAHtmlDocument',
	#instVars : [
		'html',
		'indentLevel',
		'indentCloseTags',
		'firstLine',
		'singleEncoder'
	],
	#classInstVars : [
		'knownEvents'
	],
	#category : 'Seaside-Development-Core',
	#package : 'Seaside-Development',
	#tag : 'Core'
}

{ #category : 'instance creation' }
WAPrettyPrintedDocument class >> context: aRenderContext [
	^ self basicNew initializeWithContext: aRenderContext; yourself
]

{ #category : 'configuration' }
WAPrettyPrintedDocument class >> knownEvents [
	knownEvents isNil ifTrue: [ 
		knownEvents := #('onabort' 'onauxiliaryclick' 'onblur' 'oncancel' 'onchange' 'onclick' 'onclose' 'oncontextmenu' 'oncopy' 'oncuechange' 'oncut' 'ondblclick' 'ondrag' 'ondragend' 'ondragenter' 'ondragexit' 'ondragleave' 'ondragover' 'ondragstart' 'ondrop' 'onerror' 'onfocus' 'oninput' 'oninvalid' 'onkeydown' 'onkeypress' 'onkeyup' 'onload' 'onmousedown' 'onmouseenter' 'onmouseleave' 'onmousemove' 'onmouseout' 'onmouseover' 'onmouseup' 'onpaste' 'onreset' 'onresize' 'onscroll' 'onsecuritypolicyviolation' 'onselect' 'onsubmit' 'ontoggle' 'onunload' 'onwheel') asSet ].
	^ knownEvents
]

{ #category : 'instance creation' }
WAPrettyPrintedDocument class >> on: aStream codec: aCodec [
	self error: 'Use #context:'
]

{ #category : 'private' }
WAPrettyPrintedDocument >> attribute: aKey with: aValue [
	aValue == false ifTrue: [ ^ self ].
	html space.
	html span
		class: 'wa-attribute-key';
		with: aKey.
	aValue == true ifTrue: [ ^ self ].
	self nextPut: $=.
	html span
		class: 'wa-attribute-value';
		with: [
			self nextPut: $".
			(self knownRefs includes: aKey) 
				ifTrue: [
					html anchor
						url: aValue greaseString;
						with: [ self print: aValue ] ]
				ifFalse: [
					(self knownEvents includes: aKey) 
						ifTrue: [
							html anchor
								onClick: aValue;
								with: [ self print: aValue ] ]
						ifFalse: [
							aValue == true 
								ifTrue: [ self nextPutAll: aKey ]
								ifFalse: [ self print: aValue ] ] ].
			self nextPut: $" ]
]

{ #category : 'private' }
WAPrettyPrintedDocument >> attributes: anAttributes [
	anAttributes ifNil: [ ^ self ].
	anAttributes keysAndValuesDo: [ :key :value |
		self attribute: key with: value ]
]

{ #category : 'writing' }
WAPrettyPrintedDocument >> closeTag: aString [
	indentLevel := indentLevel - 1.
	indentCloseTags removeLast
		ifTrue: [ self indent ].
	self nextPutAll: '</'.
	html span 
		class: 'wa-tag'; 
		with: aString.
	self nextPut: $>
]

{ #category : 'private' }
WAPrettyPrintedDocument >> indent [
	firstLine
		ifTrue: [ firstLine := false ]
		ifFalse: [ html break ].
	indentLevel timesRepeat: [ html space: 2 ].
	html flush
]

{ #category : 'initialization' }
WAPrettyPrintedDocument >> initializeWithContext: aRenderContext [
	self initializeWithStream: aRenderContext document stream codec: self requestContext codec.
	xmlEncoder := GRPlatform current xmlEncoderOn: (singleEncoder := xmlEncoder). "we want double escapting to happen"
	html := WAHtmlCanvas context: aRenderContext.
	indentCloseTags := OrderedCollection with: false.
	indentLevel := 0.
	firstLine := true
]

{ #category : 'configuration' }
WAPrettyPrintedDocument >> knownEvents [
	^ self class knownEvents
]

{ #category : 'configuration' }
WAPrettyPrintedDocument >> knownRefs [
	^ #('action' 'cite' 'classid' 'codebase' 'data' 'href' 'longdesc' 'profile' 'src' 'usemap')
]

{ #category : 'writing' }
WAPrettyPrintedDocument >> nextPut: aCharacter [
	singleEncoder nextPut: aCharacter
]

{ #category : 'writing' }
WAPrettyPrintedDocument >> nextPutAll: aString [
	singleEncoder nextPutAll: aString
]

{ #category : 'writing' }
WAPrettyPrintedDocument >> openTag: aString attributes: anAttributes closed: aBoolean [
	self indent.
	self nextPut: $<.
	html span
		class: 'wa-tag';
		with: aString.
	self attributes: anAttributes.
	aBoolean ifTrue: [ self nextPut: $/ ].
	self nextPut: $>.
	aBoolean ifFalse: [ indentLevel := indentLevel + 1 ].
	indentCloseTags removeLast; addLast: true; addLast: aBoolean
]
