Class {
	#name : #WAFastCGIRequestConverterTest,
	#superclass : #TestCase,
	#category : 'Seaside-Adaptors-FastCGI-Tests'
}

{ #category : #private }
WAFastCGIRequestConverterTest >> binaryFileByteArray [

	^#(45 45 45 45 45 45 87 101 98 75 105 116 70 111 114 109 66 111 117 110 100 97 114 121 80 108 73 99 72 80 55 100 107 112 106 111 90 49 55 119 13 10 67 111 110 116 101 110 116 45 68 105 115 112 111 115 105 116 105 111 110 58 32 102 111 114 109 45 100 97 116 97 59 32 110 97 109 101 61 34 52 34 59 32 102 105 108 101 110 97 109 101 61 34 102 105 110 100 109 101 110 117 46 112 110 103 34 13 10 67 111 110 116 101 110 116 45 84 121 112 101 58 32 105 109 97 103 101 47 112 110 103 13 10 13 10 137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 134 0 0 0 98 8 2 0 0 0 26 206 60 82 0 0 0 1 115 82 71 66 0 174 206 28 233 0 0 0 9 112 72 89 115 0 0 13 215 0 0 13 137 1 102 16 235 162 0 0 0 7 116 73 77 69 7 217 3 10 21 22 59 102 134 64 155 0 0 0 25 116 69 88 116 67 111 109 109 101 110 116 0 67 114 101 97 116 101 100 32 119 105 116 104 32 71 73 77 80 87 129 14 23 0 0 8 161 73 68 65 84 120 218 237 93 205 83 83 73 16 31 183 246 178 158 5 44 1 37 65 133 8 4 5 220 197 79 20 88 92 151 189 120 210 242 227 228 127 128 30 44 47 22 23 138 131 254 9 212 30 212 42 61 121 89 112 87 69 5 4 81 249 74 130 6 212 132 72 64 73 224 224 222 182 246 50 123 104 183 51 204 204 155 247 18 66 62 160 127 149 122 213 211 243 235 158 121 221 233 55 239 13 121 186 229 159 127 57 35 228 18 190 163 16 80 74 8 54 248 94 171 237 238 234 164 208 100 0 215 174 223 80 149 91 164 181 4 146 113 245 234 85 138 87 6 112 243 230 77 53 49 171 82 210 221 213 73 201 200 74 98 196 172 36 82 210 221 213 121 229 202 21 10 80 86 112 235 214 45 204 138 102 45 249 251 235 87 198 24 231 28 142 9 225 255 182 67 189 21 205 162 219 130 102 109 206 57 103 14 154 201 234 53 52 105 228 213 122 43 190 149 185 20 128 243 231 207 67 216 47 94 56 119 231 238 189 196 29 87 119 87 103 71 71 7 26 16 50 6 136 121 71 71 71 117 149 199 116 199 149 93 252 248 83 163 216 124 57 50 204 24 59 114 228 232 240 139 33 39 230 45 173 63 51 198 30 63 126 148 119 233 217 83 94 246 33 20 249 78 74 87 46 84 201 235 87 163 140 177 209 209 151 163 47 71 80 57 60 252 194 161 121 255 147 199 121 87 37 98 216 115 253 81 17 74 4 170 4 149 199 142 55 49 198 154 154 78 52 157 56 41 151 72 75 43 84 201 70 120 84 204 181 85 164 177 241 16 166 228 176 152 143 99 199 25 99 199 143 55 13 12 60 103 156 55 157 56 249 252 217 83 232 106 110 105 237 239 127 194 56 207 163 172 168 97 207 221 42 17 47 92 35 194 85 107 104 104 144 49 54 56 56 32 241 155 155 91 158 246 63 217 80 27 42 116 175 69 85 146 102 60 125 218 223 220 210 42 41 219 218 78 161 252 203 233 95 81 110 111 255 45 103 79 36 23 239 184 224 38 184 177 241 80 227 161 195 160 129 181 228 200 209 99 226 90 194 24 131 229 253 196 201 230 111 89 233 127 146 119 203 187 26 246 92 124 46 121 253 106 84 122 122 31 25 126 129 205 161 161 65 124 48 30 120 254 140 175 46 126 88 222 241 177 249 209 163 191 176 243 207 135 125 72 235 237 253 35 103 47 212 180 150 228 220 90 162 169 146 31 182 110 165 72 229 196 90 66 200 233 11 215 182 109 5 32 172 172 44 99 19 100 66 22 170 100 219 182 130 149 149 101 248 80 50 114 165 74 80 94 94 142 163 140 66 65 65 33 246 162 137 164 212 114 8 201 165 196 33 10 10 10 49 202 40 139 130 218 36 164 179 74 212 219 181 120 60 38 6 90 84 198 227 177 120 60 198 57 151 154 20 229 245 189 227 42 44 44 130 88 199 227 49 81 31 143 199 10 11 139 172 154 132 181 110 168 160 92 88 88 164 253 187 177 36 3 45 22 91 2 65 106 138 126 12 242 38 135 105 45 137 197 150 138 138 182 163 204 24 131 102 81 209 246 88 108 73 234 5 37 114 64 86 155 132 181 174 37 75 75 95 68 165 161 185 180 244 5 142 6 62 104 108 101 2 61 189 231 85 149 16 168 74 8 198 42 217 177 163 24 132 207 159 23 69 25 186 64 88 87 192 160 41 15 132 115 22 103 158 223 85 2 231 160 30 51 118 122 107 28 5 231 12 31 41 67 121 188 150 104 31 230 139 139 75 22 23 23 80 6 65 212 44 46 46 128 30 148 42 71 75 67 166 72 227 156 107 57 160 209 122 54 207 223 118 122 216 68 56 228 27 34 144 206 61 46 117 126 162 70 202 13 206 67 149 37 190 74 147 122 181 38 32 128 137 42 155 231 111 53 174 58 22 250 148 60 75 211 176 50 215 158 90 58 151 119 152 162 58 51 241 156 225 35 246 74 71 137 163 165 137 231 102 24 78 250 218 154 243 33 206 95 252 206 138 71 43 43 171 180 105 43 219 28 129 76 92 184 68 121 97 33 170 42 69 102 73 73 41 114 74 74 74 13 219 154 134 93 78 3 223 124 215 174 53 79 234 28 213 81 22 22 162 197 197 37 120 82 182 17 200 218 77 112 73 73 233 90 204 23 22 162 232 193 137 43 224 139 225 72 47 208 191 52 10 204 77 156 173 147 8 136 93 86 178 125 149 148 150 238 4 155 104 116 222 74 142 70 231 209 105 52 58 207 57 23 123 81 47 114 84 39 56 52 50 85 87 90 190 249 203 136 38 73 77 207 73 33 138 147 116 18 1 135 215 27 9 223 94 140 235 238 234 188 124 249 114 94 220 35 150 150 238 148 206 121 99 160 167 167 167 167 231 247 15 161 72 94 110 168 108 236 189 159 252 219 80 153 159 255 68 219 142 132 44 165 68 196 174 93 101 32 124 250 20 193 38 200 107 7 58 23 135 176 229 167 107 244 188 172 146 178 50 87 36 50 135 225 136 68 230 34 145 185 178 50 87 186 202 8 188 73 67 88 145 145 105 166 109 252 42 17 195 167 13 147 218 43 41 181 28 91 104 157 64 86 208 143 234 25 8 160 183 26 93 229 72 131 154 253 167 112 46 105 94 75 12 143 211 46 151 123 110 46 140 115 5 25 149 46 151 155 115 46 53 29 62 93 171 158 231 230 194 160 68 178 202 113 185 220 162 44 142 174 229 136 130 232 16 153 170 173 237 185 100 180 74 84 224 25 170 74 8 162 218 212 2 157 136 28 213 179 193 80 26 90 116 101 224 72 174 80 105 107 107 56 151 44 87 137 219 93 30 14 135 64 227 118 151 35 51 28 14 185 92 110 236 146 154 42 194 225 16 184 18 199 18 249 86 187 70 105 225 24 182 164 84 91 219 115 201 232 115 137 219 93 238 196 11 208 32 202 106 211 156 149 148 199 93 59 71 156 128 202 180 58 23 145 105 37 167 249 194 37 14 15 95 13 156 92 56 28 146 122 177 104 112 234 82 146 172 194 36 121 83 61 75 76 39 115 115 194 145 248 226 4 180 182 230 115 89 15 36 246 184 46 93 186 68 143 105 89 196 237 219 183 97 143 139 126 161 146 15 143 138 31 63 126 164 184 100 12 187 119 239 182 95 75 78 181 181 81 164 50 134 80 56 236 160 74 66 33 138 84 22 65 107 73 62 172 37 123 247 86 128 240 254 253 172 149 198 10 192 180 165 173 209 100 211 85 137 85 116 12 81 115 158 179 164 220 82 149 112 237 14 138 218 172 168 168 4 97 118 118 6 155 123 247 86 64 19 152 160 68 141 106 37 41 233 15 104 246 107 201 236 236 12 196 171 162 162 82 10 226 236 236 12 124 196 184 107 57 24 113 213 74 84 82 26 28 85 137 250 243 50 181 74 152 197 254 221 204 76 80 213 75 187 126 149 149 30 45 141 144 202 63 254 52 51 19 164 192 101 226 194 37 189 93 202 57 15 6 223 85 86 122 130 193 119 86 111 244 86 86 122 12 175 249 154 223 3 6 231 82 47 106 12 242 134 127 163 87 179 150 120 60 251 240 168 106 130 193 119 30 207 62 248 4 131 239 128 0 74 137 233 208 74 28 136 192 196 157 224 179 103 207 82 56 178 136 251 247 239 231 241 175 29 105 67 133 144 51 143 138 132 28 186 9 174 170 170 70 249 237 219 105 91 47 85 85 213 78 104 132 20 171 164 186 186 102 122 58 128 50 232 69 165 138 233 233 0 21 89 134 214 18 72 67 117 117 13 30 197 166 164 177 234 69 61 42 165 46 130 77 149 4 2 126 8 89 32 224 71 77 77 141 55 16 240 115 206 107 106 188 16 83 80 162 6 204 197 94 81 0 115 204 13 184 162 232 39 81 37 129 128 31 34 174 237 210 30 213 94 66 250 239 184 252 126 95 77 141 215 239 247 169 4 243 78 190 42 131 43 116 75 37 146 92 149 120 189 181 105 31 198 235 173 245 251 125 240 177 26 203 74 166 42 89 21 17 159 111 10 244 62 223 148 215 91 235 243 77 213 214 238 7 130 207 55 5 28 81 99 37 131 57 250 71 91 150 252 11 175 27 30 137 61 174 51 103 206 172 223 48 181 181 251 197 52 72 77 2 99 236 193 131 7 25 221 227 154 154 154 132 162 193 38 45 39 201 61 189 175 83 86 40 220 107 189 227 34 228 80 149 28 56 80 135 242 228 228 68 10 126 193 67 106 182 116 19 172 137 230 228 228 4 124 82 246 75 201 72 243 133 11 229 137 137 113 144 235 234 234 81 3 66 93 93 253 196 196 56 232 81 137 93 162 31 39 182 42 135 82 146 128 26 104 136 160 26 77 212 171 4 140 178 217 86 245 67 85 162 175 146 241 241 49 8 16 8 82 176 56 231 227 227 99 245 245 13 227 227 99 210 15 177 180 74 131 45 30 97 44 209 150 82 162 1 198 14 147 148 26 156 216 138 99 209 242 158 248 254 2 234 235 27 164 223 92 105 123 153 238 247 90 99 99 111 36 130 173 45 234 69 91 113 14 86 242 38 250 159 25 24 99 13 13 7 65 24 27 123 3 71 73 3 205 134 134 131 216 5 178 68 182 181 149 70 20 53 155 22 137 61 174 246 246 118 10 71 22 209 219 219 187 234 141 222 107 215 111 244 246 246 82 92 178 152 143 233 183 65 205 133 139 238 118 178 139 15 161 200 170 229 253 218 245 27 125 125 125 20 151 204 163 175 175 15 75 36 177 150 32 186 187 58 25 99 167 79 159 166 72 101 0 15 31 62 100 140 65 62 238 220 189 167 79 9 99 236 226 133 115 213 85 30 138 87 6 128 197 129 249 208 167 4 176 167 188 140 66 150 177 245 67 196 127 234 119 227 251 89 10 158 169 0 0 0 0 73 69 78 68 174 66 96 130 13 10 45 45 45 45 45 45 87 101 98 75 105 116 70 111 114 109 66 111 117 110 100 97 114 121 80 108 73 99 72 80 55 100 107 112 106 111 90 49 55 119 45 45 13 10) asByteArray
]

{ #category : #private }
WAFastCGIRequestConverterTest >> binaryFileContents [

	| multipartBoundaryString crlf strm bytes header trailer |
	multipartBoundaryString := '----WebKitFormBoundaryPlIcHP7dkpjoZ17w'.
	crlf := Character cr asString , Character lf asString.
	strm := WriteStream on: String new.
	strm 
		nextPutAll: '--', multipartBoundaryString;
		nextPutAll: crlf;
		nextPutAll: 'Content-Disposition: form-data; name="4"; filename="findmenu.png"';
		nextPutAll: crlf;
		nextPutAll: 'Content-Type: image/png';
		nextPutAll: crlf;
		nextPutAll: crlf.
	bytes := self binaryFileByteArray.
	header := strm contents.
	trailer := crlf,  crlf, '--', multipartBoundaryString, '--'.
	^bytes copyFrom:  header size + 1 to: bytes size - trailer size
]

{ #category : #tests }
WAFastCGIRequestConverterTest >> testBinaryFileUpload [
	| converter role request  paramsDictionary stdin waFile x y |
	converter := WAFastCGIAdaptor new.
	converter codec: GRUtf8GemStoneCodec new.
	stdin := self binaryFileByteArray.
	paramsDictionary := Dictionary new.
	paramsDictionary 
		at: 'REQUEST_URI' 
			put: '/tests/functional/WAUploadFunctionalTest?_s=htl2tWqpZgfN2Zb9&_k=rFiavdVrO1ViRzoD';
		at: 'REQUEST_METHOD'
			put: 'POST';
		at: 'CONTENT_TYPE'
			put: 'multipart/form-data; boundary=----WebKitFormBoundaryPlIcHP7dkpjoZ17w';
		at: 'CONTENT_LENGTH'
			put: stdin size printString;
		at: 'SERVER_PROTOCOL'
			put: 'HTTP/1.1';
		at: 'REMOTE_ADDR'
			put: '10.80.250.51'.
	role := FSResponderRole new
		stdin: stdin
		params: paramsDictionary.
	request := converter requestFor: role.
	self assert: request isPost.
	self assert: request rawBody = stdin.
	waFile := request postFields at: '4'.
	self assert: waFile contentType = WAMimeType imagePng.
	self assert: waFile fileName = 'findmenu.png'.
	self assert: (x := waFile rawContents) = (y := self binaryFileContents).
]

{ #category : #tests }
WAFastCGIRequestConverterTest >> testIssue239 [
	| converter role url stream specialCharacters x y |
	converter := WAFastCGIAdaptor new.
	converter codec: GRUtf8GemStoneCodec new.
	role := FSResponderRole new
		stdin: nil params: Dictionary new.
	"construct a fake url containing all of the special characters used in both query field keys and values"
	stream := WriteStream on: String new.
	stream nextPutAll: '/my/path?'.
	specialCharacters := #( $? $= $+ $& $# $/).
	specialCharacters do: [:char |
		stream nextPutAll: 'key'.
		WAGsUrlEncoder encode: char on: stream.
		stream nextPutAll: '=a'.
		WAGsUrlEncoder encode: char on: stream.
		stream nextPut: $c.
		char ~= specialCharacters last ifTrue: [  stream nextPut: $& ]].
	role params at: 'REQUEST_URI' put: stream contents.
	url := converter requestUrlFor: role.
	specialCharacters do: [:char |
		self assert: (x := url queryFields at: ('key', (String with: char))) = (y:= 'a', (String with: char), 'c') ]
]

{ #category : #tests }
WAFastCGIRequestConverterTest >> testIssue239WithMultiByteString [
	| converter role url stream specialCharacters utf8String urlStream urlEncoder x y |
	converter := WAFastCGIAdaptor new.
	converter codec: GRUtf8GemStoneCodec new.
	role := FSResponderRole new
		stdin: nil params: Dictionary new.
	"construct a fake url containing all of the special characters used in both query field keys and values"
	stream := WriteStream on: String new.
	stream nextPutAll: '/my/path?'.
	specialCharacters := #( $? $= $+ $& $# $/).
	specialCharacters do: [:char |
		stream nextPutAll: 'key'.
		WAGsUrlEncoder encode: char on: stream.
		stream nextPutAll: '=a'.
		WAGsUrlEncoder encode: char on: stream.
		stream nextPut: $c.
		stream nextPut: $& ].
	utf8String := #( 208 175 32 208 188 208 190 208 179 209 131 32 208 181 209 129 209 130 209 140 32 209 129 209 130 208 181 208 186 208 187 208 190 44 32 208 190 208 189 208 190 32 208 188 208 189 208 181 32 208 189 208 181 32 208 178 209 128 208 181 208 180 208 184 209 130 46) asByteArray asString.
	urlStream := WriteStream on: String new.
	urlEncoder := WAGsUrlEncoder on: urlStream.
	urlEncoder nextPutAll: utf8String.
	stream nextPutAll: 'key='; nextPutAll: urlStream contents.
	role params at: 'REQUEST_URI' put: stream contents.
	url := converter requestUrlFor: role.
	specialCharacters do: [:char |
		self assert: (x := url queryFields at: ('key', (String with: char))) = (y:= 'a', (String with: char), 'c') ].
	self assert: (x := (url queryFields at: 'key') encodeAsUTF8 asByteArray) = (y:= utf8String asByteArray)
]

{ #category : #tests }
WAFastCGIRequestConverterTest >> testMultiByteStringPost [
	| converter role request  utf8String multipartBoundaryString stdinStream paramsDictionary crlf x y |
	converter := WAFastCGIAdaptor new.
	converter codec: GRUtf8GemStoneCodec new.
	utf8String := #( 208 175 32 208 188 208 190 208 179 209 131 32 208 181 209 129 209 130 209 140 32 209 129 209 130 208 181 208 186 208 187 208 190 44 32 208 190 208 189 208 190 32 208 188 208 189 208 181 32 208 189 208 181 32 208 178 209 128 208 181 208 180 208 184 209 130 46) asByteArray asString.
	multipartBoundaryString := '----WebKitFormBoundaryYc4eWZ6BG8Jg5ZKm'.
	crlf := Character cr asString , Character lf asString.
	stdinStream := WriteStream on: String new.
	stdinStream 
		nextPutAll: '--', multipartBoundaryString;
		nextPutAll: crlf;
		nextPutAll: 'Content-Disposition: form-data; name="4"';
		nextPutAll: crlf;
		nextPutAll: crlf;
		nextPutAll: utf8String;
		nextPutAll: crlf;
		nextPutAll: '--', multipartBoundaryString;
		nextPutAll: crlf;
		nextPutAll: 'Content-Disposition: form-data; name="5"';
		nextPutAll: crlf;
		nextPutAll: crlf;
		nextPutAll: 'Seaside';
		nextPutAll: crlf;
		nextPutAll: '--', multipartBoundaryString, '--'.
	paramsDictionary := Dictionary new.
	paramsDictionary 
		at: 'REQUEST_URI' 
			put: '/tests/functional/WAInputPostMultipartFunctionalTest?_s=3BaOIlg4m9wyxSZ2&_k=AgZEmIExDvsgptk2';
		at: 'REQUEST_METHOD'
			put: 'POST';
		at: 'CONTENT_TYPE'
			put: 'multipart/form-data; boundary=', multipartBoundaryString;
		at: 'CONTENT_LENGTH'
			put: stdinStream contents size printString;
		at: 'SERVER_PROTOCOL'
			put: 'HTTP/1.1';
		at: 'REMOTE_ADDR'
			put: '10.80.250.51'.
	role := FSResponderRole new
		stdin: stdinStream contents asByteArray 
		params: paramsDictionary.
	request := converter requestFor: role.
	self assert: request isPost.
	self assert: request rawBody = stdinStream contents.
	self assert: (x := request bodyDecodeUsing: 'utf-8') = (y := stdinStream contents decodeFromUTF8).
	self assert: (request postFields at: '5') = 'Seaside'.
	self assert: (x := request postFields at: '4') = (y := utf8String decodeFromUTF8).
]
